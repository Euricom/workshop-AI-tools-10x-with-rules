---
description: Guidelines for creating and maintaining tRPC API routes
globs:
alwaysApply: false
---

## Project Structure

```typescript
src/server/api/
├── root.ts          // Root router configuration
├── trpc.ts          // tRPC configuration and procedures
└── routers/         // Feature-specific routers
    ├── user.ts
    ├── post.ts
    └── etc.ts
```

## Basic Setup

### Router Configuration (trpc.ts)

This is only configured once

```typescript
import { initTRPC, TRPCError } from "@trpc/server";
import superjson from "superjson";

const t = initTRPC.context<typeof createTRPCContext>().create({
  transformer: superjson,
  errorFormatter({ shape }) {
    return shape;
  },
});

export const createTRPCRouter = t.router;
export const publicProcedure = t.procedure;
export const protectedProcedure = t.procedure.use(enforceUserIsAuthed);
```

## Procedure Types

1. **Public Procedures**
   - Use for endpoints that don't require authentication
   - Example:
   ```typescript
   hello: publicProcedure
     .input(z.object({ text: z.string() }))
     .query(({ input }) => {
       return { greeting: `Hello ${input.text}` };
     }),
   ```

2. **Protected Procedures**
   - Require authenticated users
   - Automatically includes user session
   - Example:
   ```typescript
   createPost: protectedProcedure
     .input(z.object({ title: z.string().min(1) }))
     .mutation(async ({ ctx, input }) => {
       return ctx.prisma.post.create({
         data: {
           title: input.title,
           author: { connect: { id: ctx.session.user.id } },
         },
       });
     }),
   ```

## Input Validation

Always use Zod schemas for input validation:

```typescript
// Good
.input(z.object({
  email: z.string().email(),
  age: z.number().int().min(0),
  tags: z.array(z.string()).optional(),
}))

// Bad - Avoid using any or minimal validation
.input(z.any())
```

## Error Handling

1. **Use TRPCError for Known Errors**
   ```typescript
   if (!post) {
     throw new TRPCError({
       code: 'NOT_FOUND',
       message: 'Post not found',
     });
   }
   ```

2. **Common Error Codes**
   - `BAD_REQUEST`: Invalid input
   - `UNAUTHORIZED`: Not authenticated
   - `FORBIDDEN`: Not authorized
   - `NOT_FOUND`: Resource not found
   - `INTERNAL_SERVER_ERROR`: Unexpected errors

## Best Practices

1. **Naming Conventions**
   - Use camelCase for procedure names
   - Prefix queries with get/list/find
   - Prefix mutations with create/update/delete

2. **Context Usage**
   ```typescript
   // Good - Destructure what you need
   ({ ctx: { prisma, session } }) => {
     return prisma.user.findMany();
   }
   ```

3. **Query Optimization**
   - Use `select` and `include` to limit returned data
   - Implement pagination for large datasets
   ```typescript
   .query(async ({ input }) => {
     return prisma.post.findMany({
       take: input.limit,
       skip: input.offset,
       select: {
         id: true,
         title: true,
         // Only select needed fields
       },
     });
   })
   ```

4. **Security**
   - Always validate user permissions
   - Use row-level security where applicable
   - Never expose sensitive data

## Testing

1. **Mock Context**
   ```typescript
   const mockCtx = {
     session: {
       user: { id: 'test-user-id' }
     },
     prisma: mockPrisma,
   };
   ```

2. **Test Cases**
   - Test both success and error cases
   - Verify input validation
   - Check authorization rules

## Common Patterns

1. **Pagination**
   ```typescript
   .input(z.object({
     limit: z.number().min(1).max(100).default(10),
     cursor: z.string().optional(),
   }))
   ```

2. **Filtering**
   ```typescript
   .input(z.object({
     search: z.string().optional(),
     status: z.enum(['DRAFT', 'PUBLISHED']).optional(),
   }))
   ```

3. **Optimistic Updates**
   - Return created/updated entities
   - Include necessary relations
   ```typescript
   return {
     id: newPost.id,
     ...input,
     author: { id: ctx.session.user.id },
   };
   ```

## Performance Tips

1. Use batch queries where possible
2. Implement caching strategies
3. Optimize database queries
4. Use appropriate indexes

Remember to:
- Keep routers focused and organized
- Document complex procedures
- Follow consistent patterns
- Consider rate limiting for public endpoints
- Implement proper error handling
- Use TypeScript strict mode
