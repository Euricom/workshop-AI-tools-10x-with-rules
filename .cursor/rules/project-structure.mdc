---
description: Project structure and file organization guidelines
globs:
alwaysApply: false
---

# Project Structure

## Main Structure

- App is in root folder
- Server actions are in `utils/actions` folder

```tree
.
├── src/               # sources
│   ├── app/               # Next.js App Router
│   │   ├── (app)/         # Main application pages
│   │   │   ├── home/      # Home feature
│   │   │   ├── sample/    # Sample feature
│   │   │   └── ... (other app routes)
│   │   ├── api/           # API Routes
│   │   │   ├── user/      # User management
│   │   │   ├── auth/      # Authentication
│   │   │   ├── trpc/      # TRPC root entry
│   │   │   └── ... (other APIs)
│   │   ├── (landing)/     # Marketing/landing pages
│   │   ├── blog/          # Blog pages
│   │   ├── layout.tsx     # Root layout
│   │   └── ... (other app files)
│   ├── server/            # Server Utility functions and helpers
│   │   ├── actions/       # Server actions
│   │   ├── auth/          # Server auth
│   │   ├── api/           # TRPC
│   │   │   └── routers/   # feature specific routes
│   │   └── *.ts           # Other utility files
│   ├── utils/             # Global Utility functions and helpers
│   │   └── *.ts           # Other utility files (string, date, ...)
│   ├── providers/         # React Context providers
|   ├── styles/            # Global CSS styles
|   └── hooks/             # Custom React hooks
├── public/            # Static assets (images, fonts)
├── prisma/            # Prisma schema and client
├── scripts/           # Utility scripts
├── next.config.ts
├── package.json
└── ... (config files)
```

## File Naming and Organization

- Use kebab case for route directories (e.g., `api/hello-world/route`)
- Use PascalCase for components (e.g. `components/Button.tsx`)
- Shadcn components are in `components/ui`
- All other components are in `components/`
- Colocate files in the folder where they're used unless they can be used across the app
- If a component can be used in many places, place it in the `components` folder

## New Pages

- Create new pages at: `app/(app)/PAGE_NAME/page.tsx`
- Components for the page are either in `page.tsx` or in the `app/(app)/PAGE_NAME` folder
- Pages are Server components for direct data loading
- Use `swr` for data fetching in deeply nested components
- Components with `onClick` must be client components with `use client` directive
- Server action files must start with `use server`

## Utility Functions

- Create utility functions in `utils/` folder for reusable logic
- Use lodash utilities for common operations (arrays, objects, strings)
- Import specific lodash functions to minimize bundle size:

```ts
import groupBy from "lodash/groupBy";
```

